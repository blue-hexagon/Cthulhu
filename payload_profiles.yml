---
# Multiple profiles allowed, each profile must have a unique profile.id
# Binary options that must always be present are represented with yes/no values
# Binary options for which exactly one must be present - and no more and no less - are represented with exactly/nay values.
# All of these are interchangeable and maps to true (exactly, yes, true) or false (no, nay, false)
# This means the example below is exhaustive and that optionals for which one and only one must be present, the false options
# Can be removed to make the playbook less verbose
payload_profiles:
  - profile:
      profile_id: "test" # Provide a unique profile id
      hosts:
        use_group: exactly
        groupnames:
          - 'all'
        use_list: nay
        clientlist:
          - 127.0.0.1
          - 127.0.0.2
      password_generator:
        itertools_func:
          cartesian_product: exactly
          permutations: nay
          combinations: nay
          combinations_with_replacement: nay
        password_source: # TODO: Change to password_generator.source
          generator: exactly # TODO: use_generator, use_file
          file: nay
          path: "./hex_upper__4_4.txt"
        wordlist_matrix:
          - [ "", "København", "københavn", "Copenhagen", "copenhagen" ]
          - [ "!", "!1", "*", "123", "2600", "2600!", "" ] # Adding an empty string makes the row optional
        bruteforce_table:
          settings:
            min_length: 4
            max_length: 8
            character_sets:
              - HEXDIGITS_UPPER
      distributor:
        sliding_window: yes # sw = sliding_window
        sw_size_initial_bits: 3 # is equal to 3^2 == 2*2*2 == 8 ; 4 == 16 ; 5 == 32 etc.
        sw_size_min_bit: 1
        sw_size_max_bits: 5
        scheduler:
          first_in_first_out: exactly # I personally prefer this one, as it's first come, first served
          round_robin: nay
          weighted_round_robin: nay
      FrameSequence:
        - Frame: # a Frame can contain multiple ProtocolOperation(s) - see (footnote 1) for a thorough explanation of the mechanics
            - ProtocolOperation: AnyInitiateConnection # Check the docs for ProtocolOperations and their arguments
              args: [ "SenderIdentity.Client", "|get_token|" ] # |<command>| TODO
            - ProtocolOperation: AnyInitiateConnection # The values must be spelled the exact way as they appear in the docs
              args: [ "SenderIdentity.Client", "bad-token-ascmics8932" ]
        - Frame:
            - ProtocolOperation: AnyInitiateConnection
              args: [ "SenderIdentity.Client", "token" ]

# [1]:
